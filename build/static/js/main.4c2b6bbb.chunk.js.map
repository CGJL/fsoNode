{"version":3,"sources":["services/persons.js","component/Person.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","res","catch","err","id","delete","person","name","number","App","useState","persons","setPersons","setName","setNumber","fetchData","setFetchData","useEffect","personService","initialPersons","console","log","map","Fragment","key","Person","onClick","status","alert","placeholder","type","onChange","e","target","value","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wMACMA,EAAU,eAuBD,EArBA,WAGb,OAFgBC,IAAMC,IAAIF,GAEXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAkB9B,EAfA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACK,GAAD,OAASA,KAAKC,OAAM,SAACC,GAAD,OAASA,MAapC,EALA,SAACC,GAEd,OADgBV,IAAMW,OAAN,UAAgBZ,EAAhB,YAA2BW,IAC5BR,MAAK,SAACK,GAAD,OAASA,KAAKC,OAAM,SAACC,GAAD,OAASA,MClBpC,cAAuB,IAAXG,EAAU,EAAVA,OACzB,OACE,4BACGA,EAAOC,KADV,KACkBD,EAAOE,OAAQ,MCgFtBC,EAjFH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEQF,mBAAS,IAFjB,mBAETH,EAFS,KAEHM,EAFG,OAGYH,mBAAS,IAHrB,mBAGTF,EAHS,KAGDM,EAHC,OAIkBJ,oBAAS,GAJ3B,mBAITK,EAJS,KAIEC,EAJF,KAMhBC,qBAAU,WACRC,IAAuBtB,MAAK,SAACuB,GAC3BC,QAAQC,IAAIF,GACZP,EAAWO,QAEZ,CAACJ,IA0BJ,OACE,6BACE,2CACA,4BACGJ,EAAQW,KAAI,SAAChB,GACZ,OACE,kBAAC,IAAMiB,SAAP,CAAgBC,IAAKlB,EAAOF,IAC1B,kBAACqB,EAAD,CAAQnB,OAAQA,IAChB,4BAAQoB,QAAS,kBApBPtB,EAoB0BE,EAAOF,QAnBrDc,EACUd,GACPR,MAAK,SAACK,GACc,MAAfA,EAAI0B,OACNX,GAAcD,GAEda,MAAM,UAGT1B,OAAM,SAACC,GAAD,OAASiB,QAAQC,IAAIlB,MAVX,IAACC,IAoBV,gBACgB,UAMxB,8BACE,mCACQ,IACN,2BACEyB,YAAY,UACZC,KAAK,OACLC,SAAU,SAACC,GACTnB,EAAQmB,EAAEC,OAAOC,QAEnBA,MAAO3B,KAGX,qCACU,IACR,2BACEsB,YAAY,YACZC,KAAK,OACLC,SAAU,SAACC,GACTlB,EAAUkB,EAAEC,OAAOC,QAErBA,MAAO1B,KAGX,4BAAQkB,QA9DW,SAACM,GACxBA,EAAEG,iBAMFjB,EALiB,CACfX,OACAC,WAG+BZ,MAAK,WACpCoB,GAAcD,QAsDZ,iBCpEYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.4c2b6bbb.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((res) => res).catch((err) => err);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((res) => res).catch((err) => err);\r\n};\r\n\r\nexport default { getAll, create, update, remove };\r\n","import React from \"react\";\r\nimport personService from \"../services/persons\";\r\n\r\nexport default function ({ person }) {\r\n  return (\r\n    <li>\r\n      {person.name}, {person.number}{\" \"}\r\n    </li>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\n\nimport personService from \"./services/persons\";\nimport Person from \"./component/Person\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [fetchData, setFetchData] = useState(true);\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      console.log(initialPersons);\n      setPersons(initialPersons);\n    });\n  }, [fetchData]);\n\n  const handleNameSubmit = (e) => {\n    e.preventDefault();\n    let tempPerson = {\n      name,\n      number,\n    };\n\n    personService.create(tempPerson).then(() => {\n      setFetchData(!fetchData);\n    });\n  };\n\n  const handleDelete = (id) => {\n    personService\n      .remove(id)\n      .then((res) => {\n        if (res.status === 204) {\n          setFetchData(!fetchData);\n        } else {\n          alert(\"err\");\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n  return (\n    <div>\n      <h1>Phonebook!!</h1>\n      <ol>\n        {persons.map((person) => {\n          return (\n            <React.Fragment key={person.id}>\n              <Person person={person} />\n              <button onClick={() => handleDelete(person.id)}>\n                Delete person{\" \"}\n              </button>\n            </React.Fragment>\n          );\n        })}\n      </ol>\n      <form>\n        <p>\n          Name:{\" \"}\n          <input\n            placeholder=\"Name...\"\n            type=\"text\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            value={name}\n          />\n        </p>\n        <p>\n          Number:{\" \"}\n          <input\n            placeholder=\"Number...\"\n            type=\"text\"\n            onChange={(e) => {\n              setNumber(e.target.value);\n            }}\n            value={number}\n          />\n        </p>\n        <button onClick={handleNameSubmit}>Add Person</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}